{"version":3,"file":"Portal.js","sourceRoot":"","sources":["../../src/modal/Portal.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  createContext,\n  use,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type PropsWithChildren,\n} from 'react';\nimport { StyleSheet, View, type ViewProps } from 'react-native';\n\nimport {\n  NativeModalPortalContent,\n  NativeModalPortalContentWrapper,\n  NativeModalPortalHost,\n} from './native';\n\ninterface PortalHostConfig {\n  hostId: string;\n  size: { width: number; height: number };\n  contentSize?: { width: number; height: number };\n  // The content offset is the space above the modal.\n  // We are using it, to simulate correct positioning of the modal content for React Native.\n  // If this was not done, touch events would not be correctly handled on Android.\n  contentOffset: number;\n  shouldUseContentHeight?: boolean;\n  isRegistered?: boolean;\n}\ninterface PortalContextType {\n  getHost: (hostId: string) => PortalHostConfig | undefined;\n  updateHost: (hostId: string, config: Partial<Omit<PortalHostConfig, 'hostId'>>) => void;\n  removeHost: (hostId: string) => void;\n  hostScreenHeight: number;\n}\n\nexport const PortalContext = createContext<PortalContextType>({\n  getHost: () => {\n    throw new Error('PortalContext not initialized. This is likely a bug in Expo Router.');\n  },\n  removeHost: () => {\n    throw new Error('PortalContext not initialized. This is likely a bug in Expo Router.');\n  },\n  updateHost: () => {\n    throw new Error('PortalContext not initialized. This is likely a bug in Expo Router.');\n  },\n  // This will be used as a baseline for calculating the content offset.\n  // Modal can have at most the same height as the host screen.\n  hostScreenHeight: 0,\n});\n\nexport const PortalContextProvider = (props: PropsWithChildren<{ hostScreenHeight: number }>) => {\n  const [hostConfigs, setHostConfigs] = useState<Map<string, PortalHostConfig>>(() => new Map());\n\n  const getHost = useCallback(\n    (hostId: string) => {\n      return hostConfigs.get(hostId);\n    },\n    [hostConfigs]\n  );\n\n  // TODO: ENG-16597: Optimize this to avoid unnecessary rerenders of the whole app\n  const updateHost = useCallback(\n    (hostId: string, config: Partial<Omit<PortalHostConfig, 'hostId'>>) => {\n      setHostConfigs((prev) => {\n        const updated = new Map(prev);\n        const existingConfig = updated.get(hostId) ?? {\n          hostId,\n          size: { width: 0, height: 0 },\n          contentSize: { width: 0, height: 0 },\n          contentOffset: 0,\n          shouldUseContentHeight: false,\n          isRegistered: false,\n        };\n        updated.set(hostId, { ...existingConfig, ...config });\n        return updated;\n      });\n    },\n    []\n  );\n\n  const removeHost = useCallback((hostId: string) => {\n    setHostConfigs((prev) => {\n      const updated = new Map(prev);\n      updated.delete(hostId);\n      return updated;\n    });\n  }, []);\n\n  return (\n    <PortalContext.Provider\n      value={{\n        getHost,\n        updateHost,\n        removeHost,\n        hostScreenHeight: props.hostScreenHeight,\n      }}>\n      {props.children}\n    </PortalContext.Provider>\n  );\n};\n\nexport interface ModalPortalHostProps {\n  hostId: string;\n  // When set to true, the portal will use the content height instead of the full height.\n  useContentHeight?: boolean;\n  style?: ViewProps['style'];\n  height: number;\n  onRegistered?: (event: { nativeEvent: { hostId: string } }) => void;\n  onLayout?: (event: { nativeEvent: { layout: { width: number; height: number } } }) => void;\n}\n\nexport const ModalPortalHost = (props: ModalPortalHostProps) => {\n  const { removeHost, updateHost, getHost, hostScreenHeight } = use(PortalContext);\n  const prevHostId = useRef<string | undefined>(undefined);\n  const prevShouldUseContentHeight = useRef<boolean | undefined>(undefined);\n\n  useEffect(() => {\n    if (prevHostId.current) {\n      throw new Error(\n        `Changing hostId is not allowed. Previous: ${prevHostId.current}, New: ${props.hostId}`\n      );\n    }\n    prevHostId.current = props.hostId;\n    return () => {\n      removeHost(props.hostId);\n    };\n  }, [props.hostId]);\n\n  useEffect(() => {\n    if (prevShouldUseContentHeight.current === undefined) {\n      prevShouldUseContentHeight.current = props.useContentHeight;\n      updateHost(props.hostId, { shouldUseContentHeight: props.useContentHeight });\n    } else {\n      throw new Error(`Changing useContentHeight is not allowed. Host: ${props.hostId}`);\n    }\n  }, [props.useContentHeight, updateHost]);\n\n  const hostConfig = getHost(props.hostId);\n\n  const selectedHeight = props.useContentHeight\n    ? (hostConfig?.contentSize?.height ?? 0)\n    : props.height;\n\n  useEffect(() => {\n    if (process.env.EXPO_OS === 'android') {\n      const contentOffset = hostScreenHeight - selectedHeight;\n      console.log('contentOffset', contentOffset);\n      updateHost(props.hostId, {\n        contentOffset,\n      });\n    }\n  }, [hostScreenHeight, selectedHeight]);\n\n  const style = StyleSheet.flatten([\n    props.style,\n    {\n      height: selectedHeight + (hostConfig?.contentOffset ?? 0),\n      marginTop: -(hostConfig?.contentOffset ?? 0),\n    } as ViewProps['style'],\n  ]);\n\n  return (\n    <NativeModalPortalHost\n      style={style}\n      hostId={props.hostId}\n      onLayout={(e) => {\n        updateHost(props.hostId, {\n          size: {\n            width: e.nativeEvent.layout.width,\n            height: props.height,\n          },\n        });\n        props.onLayout?.(e);\n      }}\n      onRegistered={({ nativeEvent }) => {\n        updateHost(props.hostId, {\n          isRegistered: true,\n        });\n        props.onRegistered?.({ nativeEvent });\n      }}\n      onUnregistered={() => {\n        updateHost(props.hostId, {\n          isRegistered: false,\n        });\n      }}\n    />\n  );\n};\n\nexport const PortalContentHeightContext = createContext<{\n  setHeight: (height: number | undefined) => void;\n  contentOffset: number;\n}>({\n  setHeight: () => {},\n  contentOffset: 0,\n});\n\nexport interface ModalPortalContentProps {\n  hostId: string;\n  children: React.ReactNode;\n}\n\nexport const ModalPortalContent = (props: ModalPortalContentProps) => {\n  const { getHost, updateHost, hostScreenHeight } = use(PortalContext);\n  const setContentHeight = useCallback(\n    (height: number | undefined) => {\n      updateHost(props.hostId, {\n        contentSize: { width: 0, height: height ?? 0 },\n      });\n    },\n    [props.hostId, updateHost]\n  );\n\n  const hostConfig = getHost(props.hostId);\n  // At first render, the hostId might not be registered yet\n  if (!hostConfig || !hostConfig.isRegistered) {\n    // Returning null here to avoid rendering the content\n    return null;\n  }\n\n  const hostSize = hostConfig?.size;\n  // If the host size is not available, we cannot render the content\n  // Otherwise layout glitches may occur\n  if (!hostSize || (!hostSize.width && !hostSize.height)) {\n    return null;\n  }\n\n  return (\n    <NativeModalPortalContentWrapper hostId={props.hostId}>\n      <NativeModalPortalContent\n        style={{\n          width: hostSize.width || undefined,\n          height: hostScreenHeight,\n        }}>\n        <View>\n          <PortalContentHeightContext\n            value={{ setHeight: setContentHeight, contentOffset: hostConfig.contentOffset }}>\n            {props.children}\n          </PortalContentHeightContext>\n        </View>\n      </NativeModalPortalContent>\n    </NativeModalPortalContentWrapper>\n  );\n};\n"]}