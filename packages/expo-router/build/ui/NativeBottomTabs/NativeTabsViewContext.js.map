{"version":3,"file":"NativeTabsViewContext.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/NativeTabsViewContext.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAmF;AASnF,MAAM,yBAAyB,GAAG,IAAA,qBAAa,EAC7C,SAAS,CACV,CAAC;AAEK,MAAM,0BAA0B,GAAG,CAAC,EAAE,QAAQ,EAA2B,EAAE,EAAE;IAClF,MAAM,CAAC,kBAAkB,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAA4B,EAAE,CAAC,CAAC;IAE/E,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAE,IAAe,EAAE,EAAE;QAChE,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;IAEF,MAAM,wBAAwB,GAAG,CAAC,MAAc,EAAE,EAAE;QAClD,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;YAChB,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;YAC5B,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;YACvB,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,yBAAyB,CAAC,QAAQ,CACjC,KAAK,CAAC,CAAC,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,wBAAwB,EAAE,CAAC,CAC/E;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,yBAAyB,CAAC,QAAQ,CAAC,CACtC,CAAC;AACJ,CAAC,CAAC;AArBW,QAAA,0BAA0B,8BAqBrC;AAEK,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,yBAAyB,CAAC,CAAC;IACtD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;IAC5F,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AANW,QAAA,qBAAqB,yBAMhC","sourcesContent":["import React, { createContext, useContext, useState, type ReactNode } from 'react';\nimport { type ViewProps } from 'react-native';\n\ntype BottomTabAccessoryContextType = {\n  bottomTabAccessory: Record<string, ViewProps>;\n  setBottomTabAccessory: (tabKey: string, node: ViewProps) => void;\n  removeBottomTabAccessory: (tabKey: string) => void;\n};\n\nconst BottomTabAccessoryContext = createContext<BottomTabAccessoryContextType | undefined>(\n  undefined\n);\n\nexport const BottomTabAccessoryProvider = ({ children }: { children: ReactNode }) => {\n  const [bottomTabAccessory, setState] = useState<Record<string, ViewProps>>({});\n\n  const setBottomTabAccessory = (tabKey: string, node: ViewProps) => {\n    setState((prev) => ({ ...prev, [tabKey]: node }));\n  };\n\n  const removeBottomTabAccessory = (tabKey: string) => {\n    setState((prev) => {\n      const updated = { ...prev };\n      delete updated[tabKey];\n      return updated;\n    });\n  };\n\n  return (\n    <BottomTabAccessoryContext.Provider\n      value={{ bottomTabAccessory, setBottomTabAccessory, removeBottomTabAccessory }}>\n      {children}\n    </BottomTabAccessoryContext.Provider>\n  );\n};\n\nexport const useBottomTabAccessory = () => {\n  const context = useContext(BottomTabAccessoryContext);\n  if (!context) {\n    throw new Error('useBottomTabAccessory must be used within a BottomTabAccessoryProvider');\n  }\n  return context;\n};\n"]}